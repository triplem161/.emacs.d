#+TITLE: Emacs Configuration
#+AUTHOR: Marion Maignan

* Personnal Informations
#+begin_src emacs-lisp
(setq user-full-name "Maignan Marion"
      user-mail-address "maigmarion@gmail.com")
#+end_src
* Require
#+BEGIN_SRC emacs-lisp
  (require 'cl)
  (require 'cc-mode)
  ;;(require 'package)
  ;;(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (setq package-archives
        '(("gnu"             . "https://elpa.gnu.org/packages/")
          ("melpa"           . "http://melpa.org/packages/")
          ;; ("melpa-stable" . "http://stable.melpa.org/packages/")
          ;; ("elpy"         . "http://jorgenschaefer.github.io/packages/")
          ;; ("org"          . "http://orgmode.org/elpa/") ;; for org-plus-contrib
          ))
#+END_SRC
* Systems
** Windows
   Set putty for tramp mode : [[http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html][Bin for putty]]
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
  (require 'tramp)
  (set-default 'tramp-default-method "plink")
    )


#+END_SRC
** Mac
Exec-path-from-shell : get paths file

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)

    (use-package exec-path-from-shell
      :ensure t
      :init (exec-path-from-shell-initialize)
      )

    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier 'nil)
  )
#+END_SRC

* Settings
** Encoding
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

** UI
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)

  (add-hook 'emacs-startup-hook 'toggle-frame-fullscreen)

  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")

  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq ring-bell-function 'ignore)

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)

  (setq ns-pop-up-frames nil)

  ;;Highlight the cursor line
  (global-hl-line-mode t)
#+END_SRC

** Edition

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'electric-pair-mode)

  (delete-selection-mode t)

  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list" t)))

  ;;Clean up spaces before saving
  (add-hook 'before-save-hook 'whitespace-cleanup)

  (show-paren-mode t)
  (setq show-paren-delay 0)
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
      (set-default-font "Fira Code 18" )
    (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
                   (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
                   (36 . ".\\(?:>\\)")
                   (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
                   (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
                   (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
                   (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
                   ;;These line make emacs freeze
                   ;;(45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
                   ;;(46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
                   ;;(47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
                   (48 . ".\\(?:x[a-zA-Z]\\)")
                   (58 . ".\\(?:::\\|[:=]\\)")
                   (59 . ".\\(?:;;\\|;\\)")
                   (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
                   (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
                   (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
                   (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
                   (91 . ".\\(?:]\\)")
                   (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
                   (94 . ".\\(?:=\\)")
                   (119 . ".\\(?:ww\\)")
                   (123 . ".\\(?:-\\)")
                   (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
                   (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
                   )
                 ))
      (dolist (char-regexp alist)
        (set-char-table-range composition-function-table (car char-regexp)
                              `([,(cdr char-regexp) 0 font-shape-gstring]))))
#+END_SRC

** Themes
*** Solarized
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
  )
#+END_SRC

*** Darkburn
#+BEGIN_SRC emacs-lisp
  (use-package darkburn-theme
    :ensure t
  )
#+END_SRC

*** Ample
#+BEGIN_SRC emacs-lisp
  (use-package ample-theme
    :ensure t
  )
#+END_SRC
*** Zenburn
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t
  )
#+END_SRC
*** Current Theme
    #+BEGIN_SRC emacs-lisp
  (load-theme 'zenburn t)
    #+END_SRC

** Mode Line
#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
#+END_SRC
* Modes
** Magit
   #+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-c g" . magit-status)
  )
   #+END_SRC
** Dsvn
   #+BEGIN_SRC emacs-lisp
  (use-package dsvn
    :ensure t
    :bind ("C-c s" . svn-status)
  )
   #+END_SRC
** Yasnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :init (add-hook 'prog-mode-hook #'yas-minor-mode)
       :config
       (yas-reload-all)
     )
   #+END_SRC
** C# Development
*** CSharp
    #+BEGIN_SRC emacs-lisp
      (use-package csharp-mode
        :ensure t
        :mode ("\\.cs\\'" . csharp-mode)
        :init
        (yas-reload-all)
        :config
        (progn
          (add-hook 'csharp-mode-hook 'omnisharp-mode)
          (add-hook 'csharp-mode-hook 'yas-minor-mode)
          )
      )
    #+END_SRC

*** Omnisharp
    #+BEGIN_SRC emacs-lisp
      (use-package omnisharp
        :ensure t
        :bind (("C-u" . omnisharp-navigate-to-solution-file)
               ("C-c u" . omnisharp-find-usages)
               ("C-c d" . omnisharp-go-to-definition))
        :config
        (add-to-list 'company-backends 'company-omnisharp)
        (setq omnisharp-imenu-support t)
      )
    #+END_SRC
** Python Development
*** Elpy
    #+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :config (elpy-enable)
  )
    #+END_SRC
** Company
   #+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init (add-hook 'after-init-hook 'global-company-mode)
    :config (setq company-idle-delay 0.2
                  company-minimum-prefix-length 2)
  )
   #+END_SRC

** Ivy / Swipper / Counsel / Smex
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :ensure t
       :bind
       (("C-x b" . ivy-switch-buffer))
       :init
       (ivy-mode 1)
       :config
       (setq ivy-use-virtual-buffers t)
       (setq ivy-display-style 'fancy)
       )

     (use-package counsel
       :ensure t
       :bind
       (("C-c y" . counsel-yank-pop)
        ("C-c i" . counsel-imenu)
        ("M-x" . counsel-M-x))
     )

     (use-package swiper
       :ensure t
       :bind
       ("C-s" . swiper)
     )

     (use-package smex
       :ensure t
     )

     (use-package avy-zap
       :ensure t
       :bind
       (("M-z" . avy-zap-to-char-dwim))
     )
   #+END_SRC
** Avy
   #+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char)
    )
   #+END_SRC
** JS2
   #+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode ("\\.js\\'" . js2-mode)
  )
   #+END_SRC
** Emmet
   #+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :config
    (add-hook 'web-mode-hook 'emmet-mode)
  )
   #+END_SRC
** Web Mode
   #+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode ("\\.html\\'" . web-mode)
  )
   #+END_SRC

** Flycheck
   #+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t)
   )
   #+END_SRC
** Org Bullet
   #+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  )
   #+END_SRC
** Move Text
   #+BEGIN_SRC emacs-lisp
     (use-package move-text
       :ensure t
       :init
       (bind-key "M-p" 'move-text-up)
       (bind-key "M-n" 'move-text-down)
     )
   #+END_SRC
** Rest Client
   #+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t
  )
   #+END_SRC
** Json Reformat
   #+BEGIN_SRC emacs-lisp
  (use-package json-reformat
    :ensure t
  )
   #+END_SRC
** Circe
   Not working properly yet. Probably need to set TLS correctly
   #+BEGIN_SRC emacs-lisp
  (setq freenode-password "dob260989")

  (use-package circe
    :ensure t
    :config
    (setq circe-network-options
        `(("Freenode"
           :nick "triplem_161"
           :channels ("#emacs")
           :nickserv-password ,freenode-password)))
  )
   #+END_SRC
** Google this
   #+BEGIN_SRC emacs-lisp
     (use-package google-this
       :ensure t
       :bind ("C-c w" . google-this-search)
       :init
       (google-this-mode t)
     )
   #+END_SRC
** Org Capture
#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-ct" 'org-capture)
  (setq org-default-notes-file "/Users/Marion/Google Drive/Todo List/todo.org")

#+END_SRC

** Pivotal Tracker
#+BEGIN_SRC emacs-lisp
  (use-package pivotal-tracker
    :ensure t
    :config
    (setq pivotal-api-token "4bfc18370422bbd2ff8ddaa63a387152")
    )
#+END_SRC

** Xcode / Swift

   Only called when the environment is a Mac OS

    [[https://github.com/swift-emacs/swift-mode][Swift Git Repository]]
    [[https://github.com/nathankot/company-sourcekit][Company Sourcekit]]

   #+BEGIN_SRC emacs-lisp
     (when (eq system-type 'darwin)

       (use-package swift-mode
         :ensure t
       )

       (use-package company-sourcekit
         :ensure t
         :config
         (add-to-list 'company-backends 'company-sourcekit)
       )

     )
   #+END_SRC

** Shader Mode

   #+BEGIN_SRC emacs-lisp
     (use-package shader-mode
       :ensure t
     )
   #+END_SRC

** PlantUML

   #+BEGIN_SRC emacs-lisp
     (use-package plantuml-mode
       :ensure t
     )
   #+END_SRC

** Auctex

   #+BEGIN_SRC emacs-lisp
     ;; (use-package auctex
     ;;   :ensure t
     ;; )
   #+END_SRC

#+TITLE: Emacs Configuration
#+AUTHOR: Marion Maignan

* Personnal Informations
#+begin_src emacs-lisp
(setq user-full-name "Maignan Marion"
      user-mail-address "maigmarion@gmail.com")
#+end_src  
* Require
#+BEGIN_SRC emacs-lisp
  (require 'cl)
  (require 'cc-mode)
#+END_SRC
* Systems
** Windows
** Mac
Exec-path-from-shell : get paths file  

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)

    (use-package exec-path-from-shell
      :ensure t
      :init (exec-path-from-shell-initialize)
      )

    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier 'nil)
  )
#+END_SRC

* Settings
** Encoding
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

** UI
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)

  (add-hook 'emacs-startup-hook 'toggle-frame-fullscreen)

  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")

  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq ring-bell-function 'ignore)

#+END_SRC
   
** Edition

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'electric-pair-mode)

  (delete-selection-mode t)

  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list" t)))


  (show-paren-mode t)

#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "Roboto Mono Medium 17"))
#+END_SRC

** Themes
*** Custom.el 
Separate the custom theme code to its own file

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+END_SRC
*** Solarized
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
  )
#+END_SRC

** Mode Line
#+BEGIN_SRC emacs-lisp

#+END_SRC
* Modes
** Magit
   #+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-c g" . magit-status)
  )
   #+END_SRC
** Dsvn
   #+BEGIN_SRC emacs-lisp
  (use-package dsvn
    :ensure t
    :bind ("C-c s" . svn-status)
  )
   #+END_SRC
** Yasnippet
   
   #+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
  )
   #+END_SRC
   
** C# Development
*** CSharp 
    #+BEGIN_SRC emacs-lisp
  (use-package csharp-mode
    :ensure t
    :mode ("\\.cs\\'" . csharp-mode)
    :init
    (yas-reload-all)
    :config
    (progn
      (add-hook 'csharp-mode-hook 'omnisharp-mode)
      (add-hook 'csharp-mode-hook 'yas-minor-mode)
      )   
  )
    #+END_SRC
    
*** Omnisharp
    #+BEGIN_SRC emacs-lisp
  (use-package omnisharp
    :ensure t
    :bind (("C-u" . omnisharp-navigate-to-solution-file))
    :config (add-to-list 'company-backends 'company-omnisharp)
  )
    #+END_SRC
** Python Development
*** Elpy
    #+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :config (elpy-enable)
  )
    #+END_SRC
** Company
   #+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init (add-hook 'after-init-hook 'global-company-mode)
    :config (setq company-idle-delay 0.2
                  company-minimum-prefix-length 2)  
  )
   #+END_SRC
   
** Ivy / Swipper / Counsel
   #+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :bind
    (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)  
    )

  (use-package counsel
    :ensure t
    )

  (use-package swiper
    :ensure t
    :bind
    ("C-s" . swiper)
  )
   #+END_SRC
** Avy
   #+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char)
    )
   #+END_SRC
** JS2
   #+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode ("\\.js\\'" . js2-mode)
  )
   #+END_SRC
** Emmet
   #+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :config
    (add-hook 'web-mode-hook 'emmet-mode)
  )
   #+END_SRC
** Web Mode
   #+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode ("\\.html\\'" . web-mode)
  )
   #+END_SRC
   
** Flycheck
   #+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t)
  )
   #+END_SRC
** Org Bullet
   #+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  )
   #+END_SRC
** Move Text
   #+BEGIN_SRC emacs-lisp
  (use-package move-text
    :ensure t
    :config
    (move-text-default-bindings)
  )
   #+END_SRC
** Rest Client
   #+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t
  )
   #+END_SRC
** Json Reformat
   #+BEGIN_SRC emacs-lisp
  (use-package json-reformat
    :ensure t
  )
   #+END_SRC
** Circe
   Not working properly yet. Probably need to set TLS correctly
   #+BEGIN_SRC emacs-lisp
  (setq freenode-password "dob260989")

  (use-package circe
    :ensure t
    :config
    (setq circe-network-options
        `(("Freenode"
           :nick "triplem_161"
           :channels ("#emacs")
           :nickserv-password ,freenode-password)))
  )
   #+END_SRC
** Google this
   #+BEGIN_SRC emacs-lisp
     (use-package google-this
       :ensure t
       :bind ("C-c C-w" . google-this-mode-submap)
       :init
       (google-this-mode t)
     )
   #+END_SRC

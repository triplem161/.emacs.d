#+TITLE: Emacs Configuration
#+AUTHOR: Marion Maignan

* Personnal Informations
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Maignan Marion"
          user-mail-address "maigmarion@gmail.com")
  #+END_SRC
* Require
  #+BEGIN_SRC emacs-lisp

    ;; increase GC for fast startup time
    (setq gc-cons-threshold (* 50 1000 1000))


    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))

    (setq package-enable-at-startup nil)

    (straight-use-package 'use-package)

    (setq straight-use-package-by-default t)




    ;; Package to profile startup time
    ;; (use-package benchmark-init
    ;;   :ensure t
    ;;   :config
    ;;   ;; To disable collection of benchmark data after init is done.
    ;;   (add-hook 'after-init-hook 'benchmark-init/deactivate))

    ;; (use-package esup)

    ;; (setq use-package-verbose t)
    ;; (defun efs/display-startup-time ()
    ;;   (message "Emacs loaded in %s with %d garbage collections."
    ;;            (format "%.2f seconds"
    ;;                    (float-time
    ;;                     (time-subtract after-init-time before-init-time)))
    ;;            gcs-done))

    ;; (add-hook 'emacs-startup-hook #'efs/display-startup-time)
  #+END_SRC
* Systems
** Windows
   Set putty for tramp mode : [[http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html][Bin for putty]]
   #+BEGIN_SRC emacs-lisp
     (when (eq system-type 'windows-nt)
       ;; (require 'tramp)
       ;; (set-default 'tramp-default-method "plink")
       )
   #+END_SRC
** Mac
   Exec-path-from-shell : get paths file
   #+BEGIN_SRC emacs-lisp
     (when (eq system-type 'darwin)
       (use-package exec-path-from-shell
         :init (exec-path-from-shell-initialize)
         )

       (setq mac-command-modifier 'meta)
       (setq mac-option-modifier 'nil)
       )
   #+END_SRC
* Settings
** Encoding
   #+BEGIN_SRC emacs-lisp
     (set-language-environment 'utf-8)
     (setq-default buffer-file-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
     (set-default-coding-systems 'utf-8)
     (setq-default coding-system-for-read 'utf-8)
     (set-selection-coding-system 'utf-8)
     (set-clipboard-coding-system 'utf-8)
     (if (eq system-type 'windows-nt)
         (progn
           (set-clipboard-coding-system 'utf-16-le)
           (set-selection-coding-system 'utf-16-le))
       (set-selection-coding-system 'utf-8))
     ;; (unless *sys/win32*
     ;;   (set-selection-coding-system 'utf-8)
     ;;   (prefer-coding-system 'utf-8)
     ;;   (set-language-environment "UTF-8")
     ;;   (set-default-coding-systems 'utf-8)
     ;;   (set-terminal-coding-system 'utf-8)
     ;;   (set-keyboard-coding-system 'utf-8)
     ;;   (setq locale-coding-system 'utf-8))
     ;; ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
     ;; (when (display-graphic-p)
     ;;   (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
   #+END_SRC
** Themes
#+BEGIN_SRC emacs-lisp
  (set-frame-font "Hack 16" nil t)

  (use-package zenburn-theme
    :init (load-theme 'zenburn t))
#+END_SRC
** UI
   #+BEGIN_SRC emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
     (add-hook 'emacs-startup-hook 'toggle-frame-fullscreen)
     (setq inhibit-startup-message t)
     (setq initial-scratch-message "")
     (menu-bar-mode 0)
     (set-scroll-bar-mode nil)
     (tool-bar-mode 0)
     (setq ring-bell-function 'ignore)
     (setq ns-pop-up-frames nil)
     (global-hl-line-mode t)
   #+END_SRC
** Edition
   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook 'electric-pair-mode)

     (setq-default indent-tabs-mode nil)

     ;; Allow selected text to be replaced
     (delete-selection-mode t)

     (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
     (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list" t)))

     ;;Clean up spaces before saving
     (add-hook 'before-save-hook 'whitespace-cleanup)

     (show-paren-mode t)
     (setq show-paren-delay 0)

   #+END_SRC
** Mode Line
   #+BEGIN_SRC emacs-lisp
     ;; Custom time and date
     (setq display-time-day-and-date 1
           display-time-default-load-average nil
           display-time-24hr-format t)

     (setq display-time-string-forms
           '((propertize
              (format-time-string " %d %b %H:%M "))))

     (display-time-mode 1)

     ;; Custom line / column number
     (setq mode-line-position
           '((line-number-mode ("l.%l")))
           )

     ;; Modeline Style
     (set-face-attribute 'mode-line nil
                         :background "#656555"
                         :foreground "#DCDCCC"
                         :box '(:line-width 2 :color "#656555")
                         :overline nil
                         :underline nil)

     (set-face-attribute 'mode-line-inactive nil
                         :background "#656555"
                         :foreground "#DCDCCC"
                         :box '(:line-width 2 :color "#656555")
                         :overline nil
                         :underline nil)

     (set-face-attribute 'mode-line-buffer-id nil :foreground "#93E0E3")
  #+END_SRC
** Keybinds
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c r") 'query-replace)
     (global-set-key (kbd "C-c C-m") 'point-to-register)
     (global-set-key (kbd "C-c m") 'jump-to-register)
   #+END_SRC
* Modes
** C# Development
*** CSharp
    #+BEGIN_SRC emacs-lisp
      (use-package csharp-mode
        :mode ("\\.cs\\'" . csharp-mode)
        :config
        (defun csharp-variable ()
          (c-set-style "k&r")
          (setq c-basic-offset 4)
          (setq indent-tabs-mode t)
          (setq tab-width 4)
          )
        (add-hook 'csharp-mode-hook 'csharp-variable t)
        )
    #+END_SRC
** Company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :after lsp
       :config
       (setq company-idle-delay 0.3
             company-minimum-prefix-length 2))
   #+END_SRC
** Dart
#+BEGIN_SRC emacs-lisp
  (use-package dart-mode
    :mode "\\.dart\\'")

  (use-package lsp-dart
    :after lsp
    :config
    (add-hook 'dart-mode-hook 'lsp))

#+END_SRC
** Dsvn
   #+BEGIN_SRC emacs-lisp
     (use-package dsvn
       :bind ("C-c s" . svn-status)
       )
   #+END_SRC
** Ediff
   #+BEGIN_SRC emacs-lisp
     (use-package ediff
       :defer t
       :config
       (setq ediff-window-setup-function 'ediff-setup-windows-plain)
       )
   #+END_SRC
** Emmet
   #+BEGIN_SRC emacs-lisp
     (use-package emmet-mode
       :defer t
       :init
       (add-hook 'vue-mode-hook 'emmet-mode)
       )
   #+END_SRC
** Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :after lsp
       :diminish flycheck-mode)
   #+END_SRC
** Google this
   #+BEGIN_SRC emacs-lisp
     (use-package google-this
       :diminish google-this-mode
       :bind ("C-c w" . google-this-search))
   #+END_SRC
** Vertico / Consult / Marginalia / Orderless / Savehist / Avy
   #+BEGIN_SRC emacs-lisp
     (use-package vertico
       :init
       (vertico-mode))

     (use-package vertico-directory
       :straight nil
       :load-path "straight/repos/vertico/extensions/"
       :after vertico
       :bind (:map vertico-map
                   ("RET" . vertico-directory-enter)
                   ("DEL" . vertico-directory-delete-char)
                   ("M-DEL" . vertico-directory-delete-word))
       ;; Tidy shadowed file names
       :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

     (use-package consult
       :bind (("C-s" . consult-line)
              ("C-x b" . consult-buffer)
              ("M-g g" . consult-goto-line)
              ("C-c f w" . consult-ripgrep)
              ("C-c y" . consult-yank-from-kill-ring))
       :config
       (consult-customize consult--source-bookmark :preview-key nil))

     (use-package marginalia
       :init (marginalia-mode))

     (use-package orderless
       :init
       (setq completion-styles '(orderless)
             completion-category-defaults nil
             completion-category-overrides '((file (styles partial-completion)))))

     (use-package savehist
       :init
       (savehist-mode))

     (use-package avy
       :bind
       (("M-s" . avy-goto-char)
        ("M-l" . avy-goto-line))
       )

     (use-package avy-zap
       :bind
       (("M-z" . avy-zap-to-char-dwim))
       )


     ;; (use-package ivy
     ;;   :diminish ivy-mode
     ;;   :bind
     ;;   (("C-x b" . ivy-switch-buffer))
     ;;   :init
     ;;   (ivy-mode 1)
     ;;   :config
     ;;   (setq ivy-use-virtual-buffers t)
     ;;   (setq ivy-display-style 'fancy)
     ;;   )

     ;; (use-package counsel
     ;;   :bind
     ;;   (("C-c y" . counsel-yank-pop)
     ;;    ("C-c i" . counsel-imenu)
     ;;    ("M-x" . counsel-M-x)
     ;;    ("C-x r l" . counsel-bookmark)
     ;;    ("C-c f f" . counsel-git)
     ;;    ("C-c f w" . counsel-rg))
     ;;   )

     ;; (use-package swiper
     ;;   :bind
     ;;   ("C-s" . swiper)
     ;;   )

     ;; (use-package smex
     ;;   )


   #+END_SRC
** Ledger
#+begin_src emacs-lisp
  (use-package ledger-mode
    :defer t
    :config
    (setq ledger-binary-path "c:/Programming/Ledger/ledger.exe")
    )
#+end_src
** LSP
   #+begin_src emacs-lisp
     (use-package lsp-mode
       :commands (lsp lsp-deferred)
       :config
       (setq lsp-completion-provider :capf)
       (setq lsp-idle-delay 0.500)
       (setq company-minimum-prefix-length 1
                     company-idle-delay 0.0)
       )

     ;; (use-package lsp-python-ms
     ;;   :ensure t
     ;;   :init (setq lsp-python-ms-auto-install-server t)
     ;;   :hook (python-mode . (lambda ()
     ;;				 (require 'lsp-python-ms)
     ;;				 (lsp))))  ; or lsp-deferred

     (use-package lsp-pyright
     :after lsp
     :hook (python-mode . (lambda ()
     (require 'lsp-pyright)
     (lsp))))  ; or lsp-deferred
   #+end_src
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :bind ("C-c g" . magit-status)
       :config
       (setenv "GIT_ASKPASS" "git-gui--askpass"))
   #+END_SRC
** Move Text
   #+BEGIN_SRC emacs-lisp
     (use-package move-text
       :bind (("M-p" . move-text-up)
              ("M-n" . move-text-down)))
   #+END_SRC
** OrgMode
   #+BEGIN_SRC  emacs-lisp
     (straight-use-package '(org :type built-in))

     (use-package org
       :defer t
       :commands (org-capture org-agenda)
       :custom
       (org-agenda-files '("e:/Omind/Notes/omind_todo.org"))
       (org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "IN PROGRESS(p)" "|" "VALIDATE(v)" "DONE(d)" "CANCEL(c)")))
       :config

       (setq org-latex-packages-alist '(("margin=1cm" "geometry" nil)))

       (setq org-capture-templates
             '(("t" "Todo")
               ("tt" "todo" entry(file "e:/Omind/Notes/omind_todo.org")
                "* TODO %?")
               ("tp" "todo" entry(file "e:/Omind/Notes/omind_todo.org")
                "* TODO %? %^G")
               ("tl" "todo" entry(file "e:/Omind/Notes/omind_todo.org")
                "* TODO %?\n %a")
               ))

       (global-set-key (kbd "C-c c") 'org-capture)
       (global-set-key (kbd "C-c a") 'org-agenda)
       (setq org-refile-targets '(
                                  ("e:/Omind/Notes/omind_archive.org" :maxlevel . 1)
                                  ))

       (advice-add 'org-refile :after 'org-save-all-org-buffers)
       (setq org-todo-keyword-faces '(
                                      ("TODO" . "#FAF3E7")
                                      ("NEXT" . "#A0D8E9")
                                      ("IN PROGRESS" . "#EEA579")
                                      ("VALIDATE" . "#A7DB8C")
                                      ("DONE" . "#B4A7EB")
                                      ("CANCEL" . "#F3A5BC")
                                      ))
       (setq org-agenda-start-with-log-mode t)
       (setq org-log-done 'time)
       (setq org-log-done 'note)
       (setq org-log-into-drawer t)
       (setq org-confirm-babel-evaluate nil)

       )


     (with-eval-after-load 'org
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((plantuml . t)
          (sql . t))))



     ;; DO IT NEED THIS ?
     ;; (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))



     (use-package ob-plantuml
       :straight nil
       :after org
       :custom
       (org-plantuml-jar-path (expand-file-name "c:/Users/Marion/AppData/Roaming/plantuml.jar")))

     (use-package ob-sql
       :straight nil
       :after org)

     ;; (use-package org-jira
     ;;   :config
     ;;   (setq jiralib-url "https://openmindneurotech.atlassian.net/")
     ;;   (setq jiralib-update-issue-fields-exclude-list '(priority components))
     ;;   )
   #+END_SRC
** PlantUML
   #+BEGIN_SRC emacs-lisp
     (use-package plantuml-mode
       :defer t
       :config
       (setq plantuml-default-exec-mode 'jar)
       (setq plantuml-output-type "PNG"))
   #+END_SRC
** Polymode
   TODO TO REPLACE VUE-MODE ?
** Project
#+BEGIN_SRC emacs-lisp
  (use-package project
    :defer t)
#+END_SRC
** Python Development
** Rainbow Mode
   [[https://julien.danjou.info/projects/emacs-packages#rainbow-mode][Rainbow Mode Website]]
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-mode
       :after vue
       :diminish rainbow-mode
       :init (rainbow-mode 1)
       )
   #+END_SRC
** Rest Client
   #+BEGIN_SRC emacs-lisp
     (use-package restclient
       :mode ("\\.rest\\'" . restclient))
   #+END_SRC
** Shader Mode
   #+BEGIN_SRC emacs-lisp
     ;; (use-package shader-mode
     ;;   :commands shader
     ;;   )
   #+END_SRC
** Tempel
#+begin_src emacs-lisp
  (use-package tempel
    :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
           ("M-*" . tempel-insert))

    :init

    ;; Setup completion at point
    (defun tempel-setup-capf ()
      ;; Add the Tempel Capf to `completion-at-point-functions'. `tempel-expand'
      ;; only triggers on exact matches. Alternatively use `tempel-complete' if
      ;; you want to see all matches, but then Tempel will probably trigger too
      ;; often when you don't expect it.
      ;; NOTE: We add `tempel-expand' *before* the main programming mode Capf,
      ;; such that it will be tried first.
      (setq-local completion-at-point-functions
                  (cons #'tempel-expand
                        completion-at-point-functions)))

    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf)

    ;; Optionally make the Tempel templates available to Abbrev,
    ;; either locally or globally. `expand-abbrev' is bound to C-x '.
    (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
    (tempel-global-abbrev-mode)
    )
#+end_src
** Undo Tree
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :bind (("C-x u" . undo-tree-visualize))
       :diminish undo-tree-mode
       :config
       (setq undo-tree-auto-save-history nil))
   #+END_SRC
** Vue Mode
#+BEGIN_SRC emacs-lisp
  (use-package vue-mode
    :mode "\\.vue\\'"
    :config
    (setq indent-tabs-mode nil)
    (setq js-indent-level 2)
    (add-hook 'js-mode-hook
    (function (lambda () (setq indent-tabs-mode nil
                                        tab-width 2)))
    )
    (add-hook 'mmm-mode-hook (lambda () (set-face-background 'mmm-default-submode-face nil)))
    )
#+END_SRC
** Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src
** Wgrep
   #+BEGIN_SRC emacs-lisp
     (use-package wgrep
       :defer t)
   #+END_SRC
** Swift
   #+BEGIN_SRC emacs-lisp
     (use-package swift-mode
       :mode "\\.swift\\'"
       :hook (swift-mode . (lambda () (lsp))))
   #+END_SRC
** YAML
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :defer t
       :mode("\\.yaml\\'")
       )
   #+END_SRC
* Final
  #+begin_src emacs-lisp
    (setq gc-cons-threshold (* 2 1000 1000))
  #+end_src

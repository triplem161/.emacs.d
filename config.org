#+TITLE: Emacs Configuration

* Straight setup
  #+BEGIN_SRC emacs-lisp

        ;; increase GC for fast startup time
        ;; (setq gc-cons-threshold (* 50 1000 1000))
        (setq package-enable-at-startup nil)

        (defvar bootstrap-version)
        (let ((bootstrap-file
               (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
              (bootstrap-version 6))
          (unless (file-exists-p bootstrap-file)
            (with-current-buffer
                (url-retrieve-synchronously
                 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
                 'silent 'inhibit-cookies)
              (goto-char (point-max))
              (eval-print-last-sexp)))
          (load bootstrap-file nil 'nomessage))

        (straight-use-package 'use-package)
        (setq straight-use-package-by-default t)

    ;;    Package to profile startup time
        ;; (use-package benchmark-init
        ;;   :ensure t
        ;;   :config
        ;;   ;; To disable collection of benchmark data after init is done.
        ;;   (add-hook 'after-init-hook 'benchmark-init/deactivate))

        ;; (use-package esup)

        ;; (setq use-package-verbose t)
        ;; (defun efs/display-startup-time ()
        ;;   (message "Emacs loaded in %s with %d garbage collections."
        ;;            (format "%.2f seconds"
        ;;                    (float-time
        ;;                     (time-subtract after-init-time before-init-time)))
        ;;            gcs-done))

        ;; (add-hook 'emacs-startup-hook #'efs/display-startup-time)
  #+END_SRC


* Systems


** Mac Os
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    ;; to remove bug in emacs v28, remove it when 29 is out
    (customize-set-variable 'native-comp-driver-options '("-Wl,-w"))

    (set-frame-font "Andale Mono 22" nil t)
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier 'nil)
    )
#+end_src


* UI


#+begin_src emacs-lisp
  (load-theme 'modus-vivendi t)

  (global-set-key (kbd "C-c r") 'query-replace)


  (setq custom-file (locate-user-emacs-file ".tmp/custom.el"))
  (load custom-file)

  (global-hl-line-mode t)
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (set-scroll-bar-mode nil)
  (delete-selection-mode t)
  (show-paren-mode t)
  (setq show-paren-delay 0)

  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
  (setq ring-bell-function 'ignore)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq-default indent-tabs-mode nil)

  (setq backup-directory-alist `(("." . ,(expand-file-name ".tmp/backups/" user-emacs-directory))))

  (make-directory (expand-file-name ".tmp/auto-saves/" user-emacs-directory) t)
  (setq auto-save-list-file-prefix (expand-file-name ".tmp/auto-saves/sessions/" user-emacs-directory)
        auto-save-file-name-transforms `((".*" ,(expand-file-name ".tmp/auto-saves/" user-emacs-directory) t)))


  (add-hook 'emacs-startup-hook 'toggle-frame-fullscreen)
  (add-hook 'after-init-hook 'electric-pair-mode)
  (add-hook 'before-save-hook 'whitespace-cleanup)
  ;; (setq ns-pop-up-frames nil)
  ;; (setq split-height-threshold 80)
  ;; (setq split-width-threshold nil)


  ;; mode line
  (setq display-time-day-and-date 1
        display-time-default-load-average nil)

  (setq display-time-string-forms
        '((propertize
           (format-time-string "%d/%m %H:%M"))))
  (display-time-mode 1)
  ;; Custom line / column number
  (setq mode-line-position
        '((line-number-mode ("%l|%c"))))


  ;; utf 8
  (set-language-environment 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (setq-default coding-system-for-read 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (if (eq system-type 'windows-nt)
      (progn
        (set-clipboard-coding-system 'utf-16-le)
        (set-selection-coding-system 'utf-16-le))
    (set-selection-coding-system 'utf-8))
#+end_src


* Packages


** Avy
#+begin_src emacs-lisp
  (use-package avy
    :bind (("M-s" . avy-goto-char)
           ("M-l" . avy-goto-line)))
#+end_src


** Consult
#+begin_src emacs-lisp
  (use-package consult
    :bind (("C-s" . consult-line)
           ("C-x b" . consult-buffer)
           ("M-g g" . consult-goto-line)
           ("C-c f w" . consult-ripgrep)
           ("C-c y" . consult-yank-from-kill-ring)
           ("C-c m" . consult-register-load)
           ("C-c M" . consult-register)
           ("C-c C-m" . consult-register-store)
           ("C-c i" . consult-imenu))
    :config
    (consult-customize consult--source-bookmark :preview-key nil))
#+end_src


** Corfu
#+begin_src emacs-lisp
  (use-package corfu
    :init
    (global-corfu-mode)
    :custom
    (corfu-auto t))
#+end_src


** Google-This
#+begin_src emacs-lisp
  (use-package google-this
    :diminish google-this-mode
    :bind ("C-c w" . google-this-search))
#+end_src


** Ledger-Mode
#+begin_src emacs-lisp
  (use-package ledger-mode
    :defer t)
#+end_src


** LSP-Mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init (setq lsp-keymap-prefix "C-c l")
    :config
    (setq read-process-output-max (* 1024 1024))
    (lsp-enable-which-key-integration t)
    (setq lsp-completion-provider :capf)
    (setq lsp-idle-delay 0.500))
#+end_src


** LSP-Pyright
#+begin_src emacs-lisp
  ;; (use-package lsp-pyright
  ;;   :after python
  ;;   :hook (python-mode . (lambda ()
  ;;                          (require 'lsp-pyright)
  ;;                          (lsp-deferred))))
#+end_src


** Magit
#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-c g" . magit-status))
#+end_src


** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :init (marginalia-mode))
#+end_src


** Move-Text
#+begin_src emacs-lisp
  (use-package move-text
    :bind (("M-p" . move-text-up)
           ("M-n" . move-text-down)))
#+end_src


** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src


** OrgMode
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c a") 'org-agenda)

  (setq org-agenda-start-with-log-mode t
        org-confirm-babel-evaluate nil
        org-log-done 'time
        org-log-done 'note
        org-log-into-drawer t)

  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((plantuml . t)
       (sql . t))))
#+end_src


** Restclient
#+begin_src emacs-lisp
  (use-package restclient
    :mode ("\\.rest\\'" . restclient-mode))
#+END_SRC


** Swift-Mode
#+begin_src emacs-lisp
  (use-package swift-mode
    :mode "\\.swift\\'")
#+end_src


** [[https://github.com/minad/tempel][Tempel]]
#+begin_src emacs-lisp
  (use-package tempel
    :bind (("M-+" . tempel-complete)
           ("M-*" . tempel-insert))
    :init
    ;; Setup completion at point
    (defun tempel-setup-capf ()
      (setq-local completion-at-point-functions
                  (cons #'tempel-expand
                        completion-at-point-functions)))

    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf))
#+end_src


** Undo Tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :init
    (global-undo-tree-mode)
    :config
    (setq undo-tree-auto-save-history nil))
#+end_src


** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode))
#+end_src


** Vertico-Directory
Allow to quickly delete word in path when using C-x C-f.
And probably other things too.
#+begin_src emacs-lisp
  (use-package vertico-directory
    :straight nil
    :load-path "straight/repos/vertico/extensions/"
    :after vertico
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src


** Which-Key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src


** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode
    :defer t
    :mode("\\.yaml\\'"))
#+end_src



* End
  #+begin_src emacs-lisp
    (setq gc-cons-threshold (* 2 1000 1000))
  #+end_src

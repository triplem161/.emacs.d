#+TITLE: Emacs Configuration
#+AUTHOR: Marion Maignan

* Personnal Informations

#+begin_src emacs-lisp
(setq user-full-name "Maignan Marion"
      user-mail-address "maigmarion@gmail.com")
#+end_src
  
* Require
#+BEGIN_SRC emacs-lisp
  (require 'cl)
  (require 'cc-mode)
#+END_SRC
* Systems
** Windows
** Mac
Exec-path-from-shell : get paths file  

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)

    (use-package exec-path-from-shell
      :ensure t
      :init (exec-path-from-shell-initialize)
    )

  )
#+END_SRC

* Settings
** Encoding
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

** UI
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)

  (add-hook 'emacs-startup-hook 'toggle-frame-fullscreen)

  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")

  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq ring-bell-function 'ignore)

#+END_SRC
   
** Edition

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'electric-pair-mode)

  (delete-selection-mode t)

  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list" t)))

  (show-paren-mode t)

#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "Roboto Mono Medium 17"))
#+END_SRC

** Themes
*** Custom.el 
Separate the custom theme code to its own file

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+END_SRC
*** Solarized
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
  )
#+END_SRC

** Mode Line
* Modes
** Yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
  )
#+END_SRC
   
** CSharp 
#+BEGIN_SRC emacs-lisp
  (use-package csharp-mode
    :ensure t
    :mode ("\\.cs\\'" . csharp-mode)
    :init
    (add-hook 'csharp-mode-hook 'omnisharp-mode)
    (yas-reload-all)
    (add-hook 'csharp-mode-hook 'yas-minor-mode)
  )
#+END_SRC

** Omnisharp
#+BEGIN_SRC emacs-lisp
  (use-package omnisharp
    :ensure t
    :bind (("C-u" . omnisharp-navigate-to-solution-file))
    :config (add-to-list 'company-backends 'company-omnisharp)
  )
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init (add-hook 'after-init-hook 'global-company-mode)
    :config (setq company-idle-delay 0.2
                  company-minimum-prefix-length 2)  
  )
#+END_SRC

** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind (
           ("C-h b" . helm-buffers-list)
           ("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("C-h C-b" . helm-bookmarks)
           ("C-h m" . helm-imenu)
           ("C-h C-f" . omnisharp-helm-find-symbols)
           :map helm-map
              (
               ("<tab>" . helm-execute-persistent-action)
              )
         )
   :config (helm-autoresize-mode t)
  )

#+END_SRC
** JS2
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode ("\\.js\\'" . js2-mode)
  )
#+END_SRC
** Emmet
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :init (add-hook 'web-mode-hook 'emmet-mode)
  )
#+END_SRC
** Web Mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode ("\\.html\\'" . web-mode)
  )
#+END_SRC


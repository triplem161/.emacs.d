#+TITLE: Emacs Configuration
#+AUTHOR: Marion Maignan

* Personnal Informations
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Maignan Marion"
	  user-mail-address "maigmarion@gmail.com")
  #+END_SRC
* Require
  #+BEGIN_SRC emacs-lisp
    (require 'cl)
    (require 'cc-mode)
    (require 'package)
    ;;(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
    (setq package-archives
	  '(("gnu" . "https://elpa.gnu.org/packages/")
	    ("melpa" . "http://melpa.org/packages/")
	    ("melpa-stable" . "http://stable.melpa.org/packages/")
	    ;; ("elpy"		   . "http://jorgenschaefer.github.io/packages/")
	    ;; ("org"		   . "http://orgmode.org/elpa/") ;; for org-plus-contrib
	    )
	  )
  #+END_SRC
* Systems
** Windows
   Set putty for tramp mode : [[http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html][Bin for putty]]
   #+BEGIN_SRC emacs-lisp
     (when (eq system-type 'windows-nt)
       (require 'tramp)
       (set-default 'tramp-default-method "plink")
       )
   #+END_SRC
** Mac
   Exec-path-from-shell : get paths file
   #+BEGIN_SRC emacs-lisp
     (when (eq system-type 'darwin)
       (use-package exec-path-from-shell
	 :ensure t
	 :init (exec-path-from-shell-initialize)
	 )

       (setq mac-command-modifier 'meta)
       (setq mac-option-modifier 'nil)
       )
   #+END_SRC
* Settings
** Global Var
   #+BEGIN_SRC emacs-lisp
     (setq mmm_glo_ag-file-filter "")
   #+END_SRC
** Encoding
   #+BEGIN_SRC emacs-lisp
     (setq locale-coding-system 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
   #+END_SRC
** Font
   #+BEGIN_SRC emacs-lisp
     (set-frame-font "Hack 16" nil t)
   #+END_SRC
** Themes
*** Zenburn
    #+BEGIN_SRC emacs-lisp
      (use-package zenburn-theme
	:ensure t
	:defer t
	)
    #+END_SRC
*** Current Theme
    #+BEGIN_SRC emacs-lisp
      (load-theme 'zenburn t)
    #+END_SRC
** UI
   #+BEGIN_SRC emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
     (add-hook 'emacs-startup-hook 'toggle-frame-fullscreen)
     (setq inhibit-startup-message t)
     (setq initial-scratch-message "")
     (menu-bar-mode 0)
     (set-scroll-bar-mode nil)
     (tool-bar-mode 0)
     (setq ring-bell-function 'ignore)
     (setq ns-pop-up-frames nil)
     (global-hl-line-mode t)
   #+END_SRC
** Edition
   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook 'electric-pair-mode)

     ;; Allow selected text to be replaced
     (delete-selection-mode t)

     (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
     (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list" t)))

     ;;Clean up spaces before saving
     (add-hook 'before-save-hook 'whitespace-cleanup)

     (show-paren-mode t)
     (setq show-paren-delay 0)
   #+END_SRC
** Mode Line
   #+BEGIN_SRC emacs-lisp
     ;; Custom time and date
     (setq display-time-day-and-date 1
	   display-time-default-load-average nil
	   display-time-24hr-format t)

     (setq display-time-string-forms
	   '((propertize
	      (format-time-string " %d %b %H:%M "))))

     (display-time-mode 1)

     ;; Custom line / column number
     (setq mode-line-position
	   '((line-number-mode ("l.%l")))
	   )

     ;; Modeline Style
     (set-face-attribute 'mode-line nil
			 :background "#656555"
			 :foreground "#DCDCCC"
			 :box '(:line-width 2 :color "#656555")
			 :overline nil
			 :underline nil)

     (set-face-attribute 'mode-line-inactive nil
			 :background "#656555"
			 :foreground "#DCDCCC"
			 :box '(:line-width 2 :color "#656555")
			 :overline nil
			 :underline nil)

     (set-face-attribute 'mode-line-buffer-id nil :foreground "#93E0E3")
  #+END_SRC
** Keybinds
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c r") 'query-replace)
   #+END_SRC
* Modes
** Avy
    #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :bind
       (("M-s" . avy-goto-char)
	("M-l" . avy-goto-line))
       )
   #+END_SRC
** C# Development
*** CSharp
    #+BEGIN_SRC emacs-lisp
      (use-package csharp-mode
	:ensure t
	:mode ("\\.cs\\'" . csharp-mode)
	:config
	(progn
	  (add-hook 'csharp-mode-hook 'omnisharp-mode)
	  )

	(defun csharp-variable ()
	  (c-set-style "k&r")
	  (setq c-basic-offset 4)
	  (setq indent-tabs-mode t)
	  (setq tab-width 4)
	  (setq mmm_glo_ag-file-filter "--csharp")
	  )
	(add-hook 'csharp-mode-hook 'csharp-variable t)
	)
    #+END_SRC
*** Omnisharp
    #+BEGIN_SRC emacs-lisp
      (use-package omnisharp
	:ensure t
	:diminish omnisharp-mode
	:bind (:map omnisharp-mode-map
		    ("C-u" . omnisharp-navigate-to-solution-file)
		    ("C-c u" . omnisharp-find-usages)
		    ("C-c d" . omnisharp-go-to-definition))
	:config
	(setq omnisharp-server-executable-path "c:/Users/Marion/AppData/Roaming/.emacs.d/.cache/omnisharp/server/v1.34.7/OmniSharp.exe")
	(add-to-list 'company-backends 'company-omnisharp)
	(setq omnisharp-imenu-support t)
	)
    #+END_SRC
** Company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :init
       (add-hook 'after-init-hook 'global-company-mode)
       :config
       (setq company-idle-delay 0.3
	     company-minimum-prefix-length 2)
       )
   #+END_SRC
** Dsvn
   #+BEGIN_SRC emacs-lisp
     (use-package dsvn
       :ensure t
       :bind ("C-c s" . svn-status)
       )
   #+END_SRC
** Ediff
   #+BEGIN_SRC emacs-lisp
     (use-package ediff
       :defer t
       :config
       (setq ediff-window-setup-function 'ediff-setup-windows-plain)
       )
   #+END_SRC
** Emmet
   #+BEGIN_SRC emacs-lisp
     (use-package emmet-mode
       :ensure t
       :defer t
       :init
       (add-hook 'web-mode-hook 'emmet-mode)
       )
   #+END_SRC
** Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :diminish flycheck-mode
       :init
       (global-flycheck-mode t)
       )
   #+END_SRC
** Google this
   #+BEGIN_SRC emacs-lisp
     (use-package google-this
       :ensure t
       :diminish google-this-mode
       :bind ("C-c w" . google-this-search)
       :init
       (google-this-mode t)
       )
   #+END_SRC
** Ivy / Swipper / Counsel / Smex
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :ensure t
       :diminish ivy-mode
       :bind
       (("C-x b" . ivy-switch-buffer))
       :init
       (ivy-mode 1)
       :config
       (setq ivy-use-virtual-buffers t)
       (setq ivy-display-style 'fancy)
       )

     (use-package counsel
       :ensure t
       :bind
       (("C-c y" . counsel-yank-pop)
	("C-c i" . counsel-imenu)
	("M-x" . counsel-M-x)
	("C-x r l" . counsel-bookmark)
	("C-c f f" . counsel-git)
	("C-c f w" . mmm/counsel-ag-project-at-point))
       :config
       (defun mmm/counsel-ag-project-at-point ()
	 "use counsel ag to search for the word at point in the project"
	 (interactive)
	 (counsel-ag () (vc-root-dir) mmm_glo_ag-file-filter))
       )

     (use-package swiper
       :ensure t
       :bind
       ("C-s" . swiper)
       )

     (use-package smex
       :ensure t
       )

     (use-package avy-zap
       :ensure t
       :bind
       (("M-z" . avy-zap-to-char-dwim))
       )
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :bind ("C-c g" . magit-status)
       :config
       (setenv "GIT_ASKPASS" "git-gui--askpass")
       )
   #+END_SRC
** Move Text
   #+BEGIN_SRC emacs-lisp
     (use-package move-text
       :ensure t
       :init
       (bind-key "M-p" 'move-text-up)
       (bind-key "M-n" 'move-text-down)
       )
   #+END_SRC
** PlantUML
   #+BEGIN_SRC emacs-lisp
     (use-package plantuml-mode
       :ensure t
       :defer t
       :config
       (setq plantuml-default-exec-mode 'jar)
       (setq plantuml-output-type "PNG")
       )
   #+END_SRC
** Python Development
*** Elpy
    #+BEGIN_SRC emacs-lisp
      (use-package elpy
	:ensure t
	:defer t
	:init (elpy-enable)
	)
    #+END_SRC
** Rainbow Mode
   [[https://julien.danjou.info/projects/emacs-packages#rainbow-mode][Rainbow Mode Website]]
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-mode
       :ensure t
       :diminish rainbow-mode
       :init (rainbow-mode 1)
       )
   #+END_SRC
** Rest Client
   #+BEGIN_SRC emacs-lisp
     (use-package restclient
       :ensure t
       :defer t
       )
   #+END_SRC
** Shader Mode
   #+BEGIN_SRC emacs-lisp
     (use-package shader-mode
       :ensure t
       :defer t
       )
   #+END_SRC
** Undo Tree
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :diminish undo-tree-mode
       :defer t
       :init (global-undo-tree-mode)
       )
   #+END_SRC
** Web Mode
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :ensure t
       :mode ("\\.js\\'" . web-mode)
       :config
       (setq web-mode-code-indent-offset 2)
       (setq web-mode-css-indent-offset 2)
       (setq web-mode-markup-indent-offset 2)
       (setq web-mode-content-types
	     '(("jsx" . "\\.js[x]?\\'"))
	     )
       )
   #+END_SRC
** Wgrep
   #+BEGIN_SRC emacs-lisp
     (use-package wgrep
       :ensure t)
   #+END_SRC
** Whitespace Mode
   #+BEGIN_SRC emacs-lisp
     ;; (use-package whitespace
     ;;   :diminish whitespace-mode
     ;;   :init ()
     ;;   (add-hook 'prog-mode-hook 'whitespace-mode)
     ;;   :config
     ;;   ;; (setq whitespace-style '(tabs tab-mark trailing))
     ;;   (setq whitespace-style '(tabs tab-mark))
     ;;   (setq
     ;;    whitespace-display-mappings
     ;;    '(
     ;;      (tab-mark 9 [8728 9] [92 9])
     ;;      ))
     ;;   )
   #+END_SRC
** Xcode / Switf
   Only called when the environment is a Mac OS
   [[https://github.com/swift-emacs/swift-mode][Swift Git Repository]]
   Check this link to have a LSP server setup: [[https://github.com/emacs-lsp/lsp-sourcekit][Swift LSP]] (using lsp-mode as well)
   #+BEGIN_SRC emacs-lisp
     (when (eq system-type 'darwin)
       (use-package swift-mode
	 :ensure t
	 :hook (swift-mode . (lambda () (lsp))))

       ;; (use-package lsp-mode
       ;;   :ensure t
       ;;   :init
       ;;   (setq read-process-output-max (* 1024 1024))
       ;;   :config
       ;;   (setq lsp-completion-provider :capf)
       ;;   (setq lsp-idle-delay 1)
       ;;   )

       ;; (use-package lsp-sourcekit
       ;;   :ensure t
       ;;   :after lsp-mode
       ;;   :config
       ;;   ;; (setenv "SOURCEKIT_TOOLCHAIN_PATH" "/Library/Developer/Toolchains/swift-latest.xctoolchain")
       ;;   ;; (setq lsp-sourcekit-executable (expand-file-name "~/Documents/Programming/Utils/sourcekit-lsp/.build/debug/sourcekit-lsp")))
       ;;   (setq lsp-sourcekit-executable "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/sourcekit-lsp")

       ;;   (setq company-idle-delay 0.1
       ;;	  company-minimum-prefix-length 1)
       ;;   )
       )


   #+END_SRC
** Yasnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :diminish yas-minor-mode
       :init (add-hook 'prog-mode-hook #'yas-minor-mode)
       :config

       (use-package yasnippet-snippets
	 :ensure t)

       (yas-reload-all)
       )
   #+END_SRC
